<!DOCTYPE html>
<!-- saved from url=(0067)https://avaidyam.github.io/2018/02/22/SecretLife_CoreAnimation.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>The Secret Life of Core Animation</title>
  <meta name="description" content="The Secret Life of Core Animation">

  
  
  <link rel="stylesheet" href="./The Secret Life of Core Animation_files/style.css">

  <link rel="canonical" href="https://avaidyam.github.io/2018/02/22/SecretLife_CoreAnimation.html">
  <link rel="alternate" type="application/rss+xml" title="Exploring macOS Internals" href="https://avaidyam.github.io/feed.xml">

  <script id="twitter-wjs" src="./The Secret Life of Core Animation_files/widgets.js"></script><script async="" defer="" src="./The Secret Life of Core Animation_files/buttons.js"></script>
<script charset="utf-8" src="./The Secret Life of Core Animation_files/button.e96bb6acc0f8bda511c0c46a84ee18e4.js"></script></head>


  <body>

    <header class="border-bottom-thick px-2 clearfix">
  <div class="left sm-width-full py-1 mt-1 mt-lg-0">
    <a class="align-middle link-primary text-accent" href="https://avaidyam.github.io/">
      Exploring macOS Internals
    </a>
  </div>
  <div class="right sm-width-full">
    <ul class="list-reset mt-lg-1 mb-2 mb-lg-1">
      
        
        <li class="inline-block">
          <a class="align-middle link-primary mr-2 mr-lg-0 ml-lg-2" href="https://avaidyam.github.io/about/">
            About
          </a>
        </li>
        
      
        
      
        
      
        
      
    </ul>
  </div>
</header>


    <div>
      <article class="container px-2 mx-auto mb4" itemscope="" itemtype="http://schema.org/BlogPosting">
  <h1 class="h0 col-9 sm-width-full py-4 mt-3 inline-block" itemprop="name headline">The Secret Life of Core Animation</h1>
  <div class="col-4 sm-width-full mt-1 border-top-thin ">
    <p class="mb-3 py-2 bold h4"><time datetime="2018-02-22T09:00:00+00:00" itemprop="datePublished">Feb 22, 2018</time></p>
  </div>

  <div class="prose" itemprop="articleBody">
      <h1 id="the-secret-life-of-core-animation">The Secret Life of Core Animation</h1>

<p>Most developers know of Core Animation through its few key classes, such as <code class="highlighter-rouge">CALayer</code> and <code class="highlighter-rouge">CAAnimation</code>, and their subclasses. Very few need to venture past this realm to take advantage of this powerful framework. What’s not very clear to most is how many faces the framework takes on; there are three: <code class="highlighter-rouge">CoreAnimation</code>, <code class="highlighter-rouge">CoreAnimationCF</code>, and the internal C++ CoreAnimation underpinnings. All three are contained within the single <code class="highlighter-rouge">QuartzCore.framework</code> - I’ve managed to recreate a majority (if not all) the private headers for the first two (C++ is a lot harder unfortunately), and I suggest the reader <a href="https://github.com/avaidyam/QuartzInternal">take a peek at them first over here.</a> For the third facet, I’ve produced a list of some, but not all, <a href="https://github.com/avaidyam/QuartzInternal/wiki/Private-CoreAnimation-CPP-Packages">the packages (namespaces) being used</a>, and I suggest the reader take a look at those as well.</p>

<p>Let’s start with the first one: the “normal” <code class="highlighter-rouge">CoreAnimation</code> - the one that runs atop Objective-C and is the only publicly marked API for any App Store apps. The easiest way to begin using it is to link AppKit or UIKit and <code class="highlighter-rouge">NSView</code> or <code class="highlighter-rouge">UIView</code> will take care of the rest for you. You just need to interface your view’s layer, animate properties as needed, and so on. There is one small indexing trick used internally called <code class="highlighter-rouge">CAAtom</code> –  using <code class="highlighter-rouge">CAAtomGetString</code> and <code class="highlighter-rouge">CAInternAtom</code>, you can convert between a key path (string) and an indexed id used internally. In addition to atoms, the <code class="highlighter-rouge">CAObject_*</code> family of functions (<code class="highlighter-rouge">attributesForKey/Path</code>, <code class="highlighter-rouge">valueForKey/Path</code>, <code class="highlighter-rouge">setValueForKey/Path</code>, <code class="highlighter-rouge">initWithCoder</code>, <code class="highlighter-rouge">encodeWithCoder/CAMLWriter</code>, etc) are used within <code class="highlighter-rouge">CALayer</code> and friends to keep track of arbitrary values for arbitrary keys. This is why you’re able to set any layer keyPath and it won’t throw a <code class="highlighter-rouge">valueForUndefinedKey:</code> exception. Past this, there’s not much else to see here that isn’t public.</p>

<p>The interesting stuff starts with <code class="highlighter-rouge">CoreAnimationCF</code>: it’s a barebones version of the above API… all in pure C using the <code class="highlighter-rouge">CoreFoundation</code> library only. You’ve got contexts, layers, rendering, and animations. If you haven’t already, take a look at the source code above. Why does this exist at all? Because Core Animation actually is cross-platform (along a few other Apple libraries, including Core Graphics)! WebKit and iTunes, for example, have existing DLLs for all of these frameworks, but since they don’t rely on Objective-C, they use the CF flavor of this API. Should a macOS/iOS developer be using this API? Really, probably not - there’s nothing you can’t do in the normal API that <code class="highlighter-rouge">CoreAnimationCF</code> will help you with. You’ll also notice, some API are missing, like <code class="highlighter-rouge">CATransaction</code>.</p>

<p>The final facet is the most interesting, and is pretty much a mystery to me (and remains undocumented by anyone else, AFAIK) – the C++ API. Through one ObjC protocol (<code class="highlighter-rouge">CARenderValue</code>), all of the ObjC API (that is, the first facet) can be translated into the C++ API by calling <code class="highlighter-rouge">CA_copyRenderValue</code>). If you haven’t already, take a look at the list of packages above, because you’ll notice some striking similarities. My cursory understanding of this API is that, the render server (be it a background thread or a separate process) copies the context and its layer tree’s render values and can encode/decode them privately, relieving the ObjC/developer-facing API of any misuse or unexpected results. All of the <code class="highlighter-rouge">CA::Render::</code> packages/classes correspond to an ObjC layer or animation class, and once packaged up and sent over, the render server would directly manipulate these entities using the <code class="highlighter-rouge">CA::OGL::</code> packages/classes via a <code class="highlighter-rouge">SW</code> (software) renderer, <code class="highlighter-rouge">OGL</code> (OpenGL), or <code class="highlighter-rouge">Metal</code> renderer (which is likely used on all Apple platforms). In the middle, however, is <code class="highlighter-rouge">CA::CG::</code>, which looks like a lot of drawing routines that resemble Core Graphics (that is, <code class="highlighter-rouge">CGContext</code>)…</p>

<p>The way <code class="highlighter-rouge">CGContext</code> works, is that it has an internal <code class="highlighter-rouge">CGGState</code> stack, and a current <code class="highlighter-rouge">GState</code> (top of the stack), that all its clients set and manipulate via draw calls, but under the hood, <code class="highlighter-rouge">CGContextDelegate</code> translates these calls into a specific surface. <code class="highlighter-rouge">CGSWindow</code> has a <code class="highlighter-rouge">CGContextWindowDelegate</code> that when a <code class="highlighter-rouge">NSWindow</code>s (or their non-layer-backed views) need to draw, is passed as the delegate to <code class="highlighter-rouge">CGWindowContextCreate</code> and handles this translation layer. Similarly, a <code class="highlighter-rouge">CALayer</code> likely creates its context using the <code class="highlighter-rouge">CA::CG::</code> packages as a delegate, allowing the draw calls and GState modifications to map into whatever renderer is being currently used.</p>

<p>Finally, there’s one thing about both the internal C++ and public ObjC API that not many folks have documented or picked up on: <code class="highlighter-rouge">CATransaction</code>’s commit handlers and <code class="highlighter-rouge">CAContext</code>. Every process that needs to work with a layer (or more) requires at least one <code class="highlighter-rouge">CAContext</code> - this is where the root layer is hosted. You can create additional contexts, remote, or local, to allow hosting your layers in another process (a la Safari tabs). The context supports the notion of <code class="highlighter-rouge">slot</code>s and <code class="highlighter-rouge">fence</code>s: I presume slots are a way to pass context-related objects around remote contexts, but haven’t tested the theory. Fences, however, can be used to delay the host app’s transaction commit cycle until the client app (the one serving a remote layer) is done with its commit - essentially, it’s used to synchronize rendered frames, and a fence has a natural timeout of about one second (so the remote layer server should finish its commit within this time). This ties into transaction phases: there are a few points in a <code class="highlighter-rouge">CATransaction</code> that you can inject a handler: pre-layout, pre-commit, and post-commit. Combining fences with commit handlers, you can correctly synchronize remote rendered layers.</p>

<p>Some readers may arrive at a question here: if layers require a context, how does the context get rendered? I’m not too sure. I know there’s a way to initialize a local render server and a way to hook into a remote render server (that is, on macOS, <code class="highlighter-rouge">windowserver</code>), but I don’t know how the contextId makes its way over or how the two link up. However, if you’re creating a <code class="highlighter-rouge">CGSWindow</code>, the fast way to get a <code class="highlighter-rouge">CALayer</code> on-screen is to create a <code class="highlighter-rouge">CGSSurface</code> and bind a <code class="highlighter-rouge">CAView</code> to it. The header for <code class="highlighter-rouge">CAView</code> is incomplete, but it looks trivial to work with, as it then manages the surface for you.</p>

<p>So, in conclusion, there are three different facets of the Core Animation API, intricate links to Core Graphics, via <code class="highlighter-rouge">CGContextDelegate</code>, and some kind of <code class="highlighter-rouge">CARender</code> and <code class="highlighter-rouge">CAContext</code> song-and-dance that allows a layer to be presented on-screen or in a buffer somewhere. I hope that demystifies a lot of the private API here for you. Drop me a line on Twitter if you think anything is incorrect or needs explaining!</p>

  </div>

</article>

<div class="container mx-auto px-2 py-2 clearfix">
  <!-- Use if you want to show previous and next for all posts. -->



  <div class="col-4 sm-width-full left mr-lg-4 mt-3">
    <a class="no-underline border-top-thin py-1 block" href="https://avaidyam.github.io/2018/02/19/CAStateController.html">
      <span class="h5 bold text-accent">Previous</span>
      <p class="bold h3 link-primary mb-1">CAStateController &amp; Friends</p>
      <p>CALayer has internal/private support for two pretty cool things: archives and states. We’ll talk about states first, as they’re the...</p>
    </a>
  </div>
  
  
  <div class="col-4 sm-width-full left mt-3">
    <a class="no-underline border-top-thin py-1 block" href="https://avaidyam.github.io/2018/03/16/Building-Better-RegisterEventHotKey.html">
      <span class="h5 bold text-accent">Next</span>
      <p class="bold h3 link-primary mb-1">Building a Better RegisterEventHotKey</p>
      <p># Building a Better `RegisterEventHotKey`! Okay, well, maybe not better, but at least, not under imminent threat of deprecation -...</p>
    </a>
  </div>


</div>

    </div>

    <div class="border-top-thin clearfix mt-2 mt-lg-4">
  <div class="container mx-auto px-2">
    <p class="col-8 sm-width-full left py-2 mb-0">This project is maintained by <a class="text-accent" href="https://github.com/avaidyam">avaidyam</a></p>
    <ul class="list-reset right clearfix sm-width-full py-2 mb-2 mb-lg-0">
      <li class="inline-block mr-1">
        <iframe id="twitter-widget-0" scrolling="no" frameborder="0" allowtransparency="true" class="twitter-share-button twitter-share-button-rendered twitter-tweet-button" style="position: static; visibility: visible; width: 63px; height: 20px;" title="Twitter Tweet Button" src="./The Secret Life of Core Animation_files/tweet_button.d30011b0f5ce05b98f24b01d3331b3c1.en.html"></iframe> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
      </li>
      <li class="inline-block">
        <span></span>
      </li>
    </ul>
  </div>
</div>


  


<iframe scrolling="no" frameborder="0" allowtransparency="true" src="./The Secret Life of Core Animation_files/widget_iframe.d30011b0f5ce05b98f24b01d3331b3c1.html" title="Twitter settings iframe" style="display: none;"></iframe></body></html>